<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FPS Counter</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Courier New', monospace;
            background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
            color: #ffffff;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            overflow: hidden;
        }

        .fps-container {
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #00ff41;
            border-radius: 15px;
            padding: 30px;
            text-align: center;
            box-shadow: 0 0 30px rgba(0, 255, 65, 0.3);
            backdrop-filter: blur(10px);
            min-width: 400px;
        }

        .fps-display {
            font-size: 4em;
            font-weight: bold;
            color: #00ff41;
            text-shadow: 0 0 20px rgba(0, 255, 65, 0.5);
            margin-bottom: 10px;
            font-family: 'Courier New', monospace;
        }

        .fps-label {
            font-size: 1.2em;
            color: #cccccc;
            margin-bottom: 30px;
            letter-spacing: 2px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-box {
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 15px;
        }

        .stat-value {
            font-size: 1.8em;
            font-weight: bold;
            color: #ffffff;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9em;
            color: #888;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .controls {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-bottom: 20px;
        }

        .btn {
            background: #00ff41;
            color: #000;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            font-size: 0.9em;
            transition: all 0.3s ease;
        }

        .btn:hover {
            background: #00cc33;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 65, 0.3);
        }

        .btn:active {
            transform: translateY(0);
        }

        .fps-graph {
            width: 100%;
            height: 80px;
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid #333;
            border-radius: 5px;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
        }

        .graph-line {
            position: absolute;
            bottom: 0;
            width: 2px;
            background: #00ff41;
            transition: height 0.1s ease;
        }

        .overlay-mode {
            position: fixed;
            top: 20px;
            right: 20px;
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #00ff41;
            border-radius: 10px;
            padding: 15px;
            z-index: 9999;
            min-width: 200px;
        }

        .overlay-mode .fps-display {
            font-size: 2.5em;
            margin-bottom: 5px;
        }

        .overlay-mode .stats-grid {
            grid-template-columns: 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }

        .overlay-mode .stat-box {
            padding: 8px;
        }

        .overlay-mode .stat-value {
            font-size: 1.2em;
        }

        .warning {
            color: #ffaa00;
        }

        .critical {
            color: #ff4444;
        }

        .good {
            color: #00ff41;
        }

        .booster-panel {
            background: rgba(0, 0, 0, 0.8);
            border: 2px solid #ff6600;
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
            box-shadow: 0 0 30px rgba(255, 102, 0, 0.3);
        }

        .booster-title {
            font-size: 1.5em;
            color: #ff6600;
            text-align: center;
            margin-bottom: 20px;
            text-shadow: 0 0 10px rgba(255, 102, 0, 0.5);
        }

        .boost-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .boost-card {
            background: rgba(255, 102, 0, 0.1);
            border: 1px solid #ff6600;
            border-radius: 10px;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .boost-card:hover {
            background: rgba(255, 102, 0, 0.2);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 102, 0, 0.3);
        }

        .boost-card.active {
            background: rgba(255, 102, 0, 0.3);
            border-color: #ffaa00;
        }

        .boost-icon {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .boost-name {
            font-weight: bold;
            color: #ff6600;
            margin-bottom: 5px;
        }

        .boost-desc {
            font-size: 0.8em;
            color: #ccc;
        }

        .performance-monitor {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .perf-metric {
            background: rgba(0, 0, 0, 0.5);
            border: 1px solid #333;
            border-radius: 8px;
            padding: 12px;
            text-align: center;
        }

        .perf-value {
            font-size: 1.5em;
            font-weight: bold;
            color: #00ff41;
            margin-bottom: 5px;
        }

        .perf-label {
            font-size: 0.8em;
            color: #888;
        }

        .boost-status {
            background: rgba(0, 255, 65, 0.1);
            border: 1px solid #00ff41;
            border-radius: 8px;
            padding: 15px;
            margin-top: 15px;
            text-align: center;
        }

        .boost-status.warning {
            background: rgba(255, 170, 0, 0.1);
            border-color: #ffaa00;
            color: #ffaa00;
        }

        .boost-status.success {
            background: rgba(0, 255, 65, 0.1);
            border-color: #00ff41;
            color: #00ff41;
        }

        .slider-container {
            margin: 15px 0;
        }

        .slider {
            width: 100%;
            height: 8px;
            border-radius: 5px;
            background: #333;
            outline: none;
            -webkit-appearance: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #ff6600;
            cursor: pointer;
        }

        .slider::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #ff6600;
            cursor: pointer;
            border: none;
        }
    </style>
</head>
<body>
    <div class="fps-container" id="fpsContainer">
        <div class="fps-display" id="fpsDisplay">--</div>
        <div class="fps-label">FRAMES PER SECOND</div>
        
        <div class="stats-grid">
            <div class="stat-box">
                <div class="stat-value" id="avgFps">--</div>
                <div class="stat-label">Average</div>
            </div>
            <div class="stat-box">
                <div class="stat-value" id="minFps">--</div>
                <div class="stat-label">Minimum</div>
            </div>
            <div class="stat-box">
                <div class="stat-value" id="maxFps">--</div>
                <div class="stat-label">Maximum</div>
            </div>
            <div class="stat-box">
                <div class="stat-value" id="frameTime">--</div>
                <div class="stat-label">Frame Time (ms)</div>
            </div>
        </div>

        <div class="controls">
            <button class="btn" onclick="toggleOverlay()">Toggle Overlay</button>
            <button class="btn" onclick="resetStats()">Reset Stats</button>
            <button class="btn" onclick="toggleGraph()">Toggle Graph</button>
            <button class="btn" onclick="toggleBooster()">Game Booster</button>
        </div>

        <div class="fps-graph" id="fpsGraph" style="display: none;"></div>

        <!-- Game Booster Panel -->
        <div class="booster-panel" id="boosterPanel" style="display: none;">
            <div class="booster-title">ðŸš€ GAME BOOSTER</div>
            
            <div class="boost-options">
                <div class="boost-card" onclick="toggleBoost('highPerformance')" id="highPerformance">
                    <div class="boost-icon">âš¡</div>
                    <div class="boost-name">High Performance</div>
                    <div class="boost-desc">Maximum CPU priority</div>
                </div>
                <div class="boost-card" onclick="toggleBoost('memoryCleanup')" id="memoryCleanup">
                    <div class="boost-icon">ðŸ§¹</div>
                    <div class="boost-name">Memory Cleanup</div>
                    <div class="boost-desc">Free up RAM</div>
                </div>
                <div class="boost-card" onclick="toggleBoost('gpuBoost')" id="gpuBoost">
                    <div class="boost-icon">ðŸŽ®</div>
                    <div class="boost-name">GPU Boost</div>
                    <div class="boost-desc">Optimize graphics</div>
                </div>
                <div class="boost-card" onclick="toggleBoost('networkOptimize')" id="networkOptimize">
                    <div class="boost-icon">ðŸ“¡</div>
                    <div class="boost-name">Network Optimize</div>
                    <div class="boost-desc">Reduce latency</div>
                </div>
            </div>

            <div class="slider-container">
                <label style="color: #ff6600; margin-bottom: 10px; display: block;">Performance Level</label>
                <input type="range" min="1" max="5" value="3" class="slider" id="performanceSlider" oninput="updatePerformance(this.value)">
                <div style="display: flex; justify-content: space-between; font-size: 0.8em; color: #888; margin-top: 5px;">
                    <span>Balanced</span>
                    <span>Maximum</span>
                </div>
            </div>

            <div class="performance-monitor">
                <div class="perf-metric">
                    <div class="perf-value" id="cpuUsage">--</div>
                    <div class="perf-label">CPU Usage</div>
                </div>
                <div class="perf-metric">
                    <div class="perf-value" id="memoryUsage">--</div>
                    <div class="perf-label">Memory</div>
                </div>
                <div class="perf-metric">
                    <div class="perf-value" id="temperature">--</div>
                    <div class="perf-label">Temp (Â°C)</div>
                </div>
                <div class="perf-metric">
                    <div class="perf-value" id="networkLatency">--</div>
                    <div class="perf-label">Ping (ms)</div>
                </div>
            </div>

            <div class="boost-status success" id="boostStatus">
                ðŸŸ¢ System optimized for gaming
            </div>
        </div>
    </div>

    <script>
        let fps = 0;
        let frameCount = 0;
        let lastTime = performance.now();
        let fpsHistory = [];
        let isOverlay = false;
        let showGraph = false;
        let graphPoints = [];
        let maxGraphPoints = 100;
        let showBooster = false;

        // Game Booster variables
        let activeBoosts = {
            highPerformance: false,
            memoryCleanup: false,
            gpuBoost: false,
            networkOptimize: false
        };
        let performanceLevel = 3;
        let systemMetrics = {
            cpu: 0,
            memory: 0,
            temperature: 0,
            ping: 0
        };

        // FPS calculation
        function calculateFPS() {
            frameCount++;
            const currentTime = performance.now();
            const deltaTime = currentTime - lastTime;

            if (deltaTime >= 1000) { // Update every second
                fps = Math.round((frameCount * 1000) / deltaTime);
                fpsHistory.push(fps);
                
                if (fpsHistory.length > 300) { // Keep last 5 minutes of data
                    fpsHistory.shift();
                }

                updateDisplay();
                frameCount = 0;
                lastTime = currentTime;
            }

            requestAnimationFrame(calculateFPS);
        }

        function updateDisplay() {
            const fpsElement = document.getElementById('fpsDisplay');
            const avgElement = document.getElementById('avgFps');
            const minElement = document.getElementById('minFps');
            const maxElement = document.getElementById('maxFps');
            const frameTimeElement = document.getElementById('frameTime');

            // Update FPS display with color coding
            fpsElement.textContent = fps;
            fpsElement.className = 'fps-display';
            
            if (fps >= 60) {
                fpsElement.classList.add('good');
            } else if (fps >= 30) {
                fpsElement.classList.add('warning');
            } else {
                fpsElement.classList.add('critical');
            }

            if (fpsHistory.length > 0) {
                const avg = Math.round(fpsHistory.reduce((a, b) => a + b, 0) / fpsHistory.length);
                const min = Math.min(...fpsHistory);
                const max = Math.max(...fpsHistory);
                const frameTime = fps > 0 ? (1000 / fps).toFixed(2) : '--';

                avgElement.textContent = avg;
                minElement.textContent = min;
                maxElement.textContent = max;
                frameTimeElement.textContent = frameTime;

                // Update graph
                if (showGraph) {
                    updateGraph();
                }
            }
        }

        function updateGraph() {
            const graph = document.getElementById('fpsGraph');
            graphPoints.push(fps);
            
            if (graphPoints.length > maxGraphPoints) {
                graphPoints.shift();
            }

            // Clear existing graph
            graph.innerHTML = '';

            // Draw graph lines
            const maxFpsInGraph = Math.max(...graphPoints, 60);
            graphPoints.forEach((point, index) => {
                const line = document.createElement('div');
                line.className = 'graph-line';
                line.style.left = `${(index / maxGraphPoints) * 100}%`;
                line.style.height = `${(point / maxFpsInGraph) * 100}%`;
                
                if (point >= 60) {
                    line.style.background = '#00ff41';
                } else if (point >= 30) {
                    line.style.background = '#ffaa00';
                } else {
                    line.style.background = '#ff4444';
                }
                
                graph.appendChild(line);
            });
        }

        function toggleOverlay() {
            const container = document.getElementById('fpsContainer');
            isOverlay = !isOverlay;
            
            if (isOverlay) {
                container.classList.add('overlay-mode');
                document.body.style.background = 'transparent';
            } else {
                container.classList.remove('overlay-mode');
                document.body.style.background = 'linear-gradient(135deg, #1a1a1a, #2d2d2d)';
            }
        }

        function resetStats() {
            fpsHistory = [];
            graphPoints = [];
            document.getElementById('avgFps').textContent = '--';
            document.getElementById('minFps').textContent = '--';
            document.getElementById('maxFps').textContent = '--';
            document.getElementById('frameTime').textContent = '--';
        }

        function toggleGraph() {
            const graph = document.getElementById('fpsGraph');
            showGraph = !showGraph;
            graph.style.display = showGraph ? 'block' : 'none';
        }

        function toggleBooster() {
            const panel = document.getElementById('boosterPanel');
            showBooster = !showBooster;
            panel.style.display = showBooster ? 'block' : 'none';
            
            if (showBooster) {
                startSystemMonitoring();
            } else {
                stopSystemMonitoring();
            }
        }

        function toggleBoost(boostType) {
            activeBoosts[boostType] = !activeBoosts[boostType];
            const card = document.getElementById(boostType);
            
            if (activeBoosts[boostType]) {
                card.classList.add('active');
                applyBoost(boostType);
            } else {
                card.classList.remove('active');
                removeBoost(boostType);
            }
            
            updateBoostStatus();
        }

        function applyBoost(boostType) {
            const status = document.getElementById('boostStatus');
            
            switch(boostType) {
                case 'highPerformance':
                    // Simulate high performance mode
                    document.body.style.imageRendering = 'optimizeSpeed';
                    status.innerHTML = 'âš¡ High Performance Mode Activated';
                    break;
                case 'memoryCleanup':
                    // Trigger garbage collection if available
                    if (window.gc) window.gc();
                    // Clear unnecessary data
                    if (fpsHistory.length > 60) {
                        fpsHistory = fpsHistory.slice(-60);
                    }
                    status.innerHTML = 'ðŸ§¹ Memory Cleanup Completed';
                    break;
                case 'gpuBoost':
                    // Optimize rendering
                    document.body.style.transform = 'translateZ(0)';
                    document.body.style.backfaceVisibility = 'hidden';
                    status.innerHTML = 'ðŸŽ® GPU Optimization Enabled';
                    break;
                case 'networkOptimize':
                    // Simulate network optimization
                    status.innerHTML = 'ðŸ“¡ Network Optimization Active';
                    break;
            }
        }

        function removeBoost(boostType) {
            const status = document.getElementById('boostStatus');
            
            switch(boostType) {
                case 'highPerformance':
                    document.body.style.imageRendering = '';
                    break;
                case 'gpuBoost':
                    document.body.style.transform = '';
                    document.body.style.backfaceVisibility = '';
                    break;
            }
            
            updateBoostStatus();
        }

        function updateBoostStatus() {
            const status = document.getElementById('boostStatus');
            const activeCount = Object.values(activeBoosts).filter(Boolean).length;
            
            if (activeCount === 0) {
                status.innerHTML = 'ðŸ”´ No optimizations active';
                status.className = 'boost-status warning';
            } else if (activeCount <= 2) {
                status.innerHTML = `ðŸŸ¡ ${activeCount} optimization(s) active`;
                status.className = 'boost-status';
            } else {
                status.innerHTML = `ðŸŸ¢ Maximum optimization active (${activeCount}/4)`;
                status.className = 'boost-status success';
            }
        }

        function updatePerformance(level) {
            performanceLevel = parseInt(level);
            const status = document.getElementById('boostStatus');
            
            // Apply performance level effects
            switch(performanceLevel) {
                case 1:
                case 2:
                    status.innerHTML = 'ðŸ”µ Balanced Performance Mode';
                    break;
                case 3:
                case 4:
                    status.innerHTML = 'ðŸŸ¡ High Performance Mode';
                    break;
                case 5:
                    status.innerHTML = 'ðŸ”´ Maximum Performance Mode';
                    // Enable all boosts at max level
                    Object.keys(activeBoosts).forEach(boost => {
                        if (!activeBoosts[boost]) {
                            toggleBoost(boost);
                        }
                    });
                    break;
            }
        }

        function startSystemMonitoring() {
            systemMetrics.interval = setInterval(() => {
                // Simulate system metrics (in real implementation, these would come from system APIs)
                systemMetrics.cpu = Math.floor(Math.random() * (80 - 30 + 1) + 30); // 30-80%
                systemMetrics.memory = Math.floor(Math.random() * (90 - 40 + 1) + 40); // 40-90%
                systemMetrics.temperature = Math.floor(Math.random() * (75 - 45 + 1) + 45); // 45-75Â°C
                systemMetrics.ping = Math.floor(Math.random() * (100 - 15 + 1) + 15); // 15-100ms
                
                // Apply booster effects to metrics
                if (activeBoosts.highPerformance) {
                    systemMetrics.cpu = Math.max(systemMetrics.cpu - 10, 20);
                }
                if (activeBoosts.memoryCleanup) {
                    systemMetrics.memory = Math.max(systemMetrics.memory - 15, 25);
                }
                if (activeBoosts.networkOptimize) {
                    systemMetrics.ping = Math.max(systemMetrics.ping - 20, 5);
                }
                
                // Performance level adjustments
                const reduction = (performanceLevel - 1) * 5;
                systemMetrics.cpu = Math.max(systemMetrics.cpu - reduction, 15);
                systemMetrics.temperature = Math.max(systemMetrics.temperature - reduction, 35);
                
                updateSystemDisplay();
            }, 2000);
        }

        function stopSystemMonitoring() {
            if (systemMetrics.interval) {
                clearInterval(systemMetrics.interval);
            }
        }

        function updateSystemDisplay() {
            document.getElementById('cpuUsage').textContent = systemMetrics.cpu + '%';
            document.getElementById('memoryUsage').textContent = systemMetrics.memory + '%';
            document.getElementById('temperature').textContent = systemMetrics.temperature + 'Â°C';
            document.getElementById('networkLatency').textContent = systemMetrics.ping + 'ms';
            
            // Color coding for metrics
            const cpuElement = document.getElementById('cpuUsage');
            const memElement = document.getElementById('memoryUsage');
            const tempElement = document.getElementById('temperature');
            const pingElement = document.getElementById('networkLatency');
            
            cpuElement.className = systemMetrics.cpu > 70 ? 'perf-value critical' : systemMetrics.cpu > 50 ? 'perf-value warning' : 'perf-value good';
            memElement.className = systemMetrics.memory > 80 ? 'perf-value critical' : systemMetrics.memory > 60 ? 'perf-value warning' : 'perf-value good';
            tempElement.className = systemMetrics.temperature > 65 ? 'perf-value critical' : systemMetrics.temperature > 55 ? 'perf-value warning' : 'perf-value good';
            pingElement.className = systemMetrics.ping > 50 ? 'perf-value critical' : systemMetrics.ping > 25 ? 'perf-value warning' : 'perf-value good';
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => {
            if (e.key === 'F1') {
                e.preventDefault();
                toggleOverlay();
            } else if (e.key === 'F2') {
                e.preventDefault();
                resetStats();
            } else if (e.key === 'F3') {
                e.preventDefault();
                toggleGraph();
            } else if (e.key === 'F4') {
                e.preventDefault();
                toggleBooster();
            }
        });

        // Start FPS monitoring
        calculateFPS();

        // Show instructions
        setTimeout(() => {
            console.log('FPS Counter & Game Booster Controls:');
            console.log('F1 - Toggle Overlay Mode');
            console.log('F2 - Reset Statistics');
            console.log('F3 - Toggle Graph');
            console.log('F4 - Toggle Game Booster');
            console.log('');
            console.log('Game Booster Features:');
            console.log('â€¢ High Performance - Maximize CPU priority');
            console.log('â€¢ Memory Cleanup - Free up RAM');
            console.log('â€¢ GPU Boost - Optimize graphics rendering');
            console.log('â€¢ Network Optimize - Reduce latency');
        }, 1000);
    </script>
</body>
</html>